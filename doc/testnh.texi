\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename testnh.info
@settitle TestNH Manual 3.0.0
@documentencoding UTF-8
@afourpaper
@dircategory Science Biology Genetics
@direntry
@c * testnh: (testnh)              TestNH.
* mapnh: (mapnh)                MapNH.
@c * partnh: (partnh)              PartNH.
@c * randnh: (randnh)              RandNH.
@end direntry
@c %**end of header


@copying
This is the manual of the TestNH package, version 3.0.0.

Copyright @copyright{} 2017 Bastien Boussau, Julien Dutheil and Laurent Guéguen
@end copying

@titlepage
@title TestNH Manual
@author Bastien Boussau, Julien Dutheil, Laurent Guéguen
@author @email{julien.dutheil@@univ-montp2.fr}

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1fill1
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The TestNH Manual

@insertcopying

@menu
* Introduction::
* mapnh::
@c * testnh::
@c * partnh::
@c * randnh::

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Description::
* Run::

@end detailmenu
@end menu

@end ifnottex

@c ------------------------------------------------------------------------------------------------------------------

@node Introduction, mapnh, Top, Top
@chapter Introduction

TestNH is a package for studying the non-homogeneous process of
sequence evolution. It is written on the Bio++ libraries, and uses the
command line syntax common to the Bio++ Program Suite (BppSuite). Part
of this manual will therefore link to the corresponding manual of
BppSuite where needed, and only describe options specific to the
TestNH package.

Note that several detailed examples are provided along with the source
code of the program, and can serve as good training starts. This
manual intends to provide an exhaustive description of the options
used in these examples.

@c ------------------------------------------------------------------------------------------------------------------

@menu
* Description::
* Run::
@end menu

@node Description, Run, Introduction, Introduction
@section Description of the programs

The TestNH package contains one program:

@table @samp

@item mapnh
maps substitutions onto a phylogenetic tree, and counts types of
substitutions per branch of the tree. The resulting counts are used as
input of a clustering procedure to output groups of branches with
similar substitution processes.

@c @item testnh
@c performs the Bowker test for non-stationarity. Note that although the
@c test was described in the literature as testing non-homogeneity, it
@c can only detect non-stationary processes.

@c @item partnh
@c test and select non-homogeneous substitution models of sequence
@c evolution. It takes as input a branch-clustering tree, typically
@c output by @samp{mapnh} in order to design partitions. @samp{partnh}
@c can also perform model selection according to various criteria, like
@c AIC, AICc, BIC or LRT.

@c @item randnh
@c generate model description files (to be used with @samp{bppml}) with random partitions.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Run, mapnh , Description, Introduction
@section How to run the programs

All programs in the TestNH package follow the @samp{bppSuite} syntax.
They are command line driven, and take as input options with the form
@samp{name}=@samp{value}. These options can be gathered into a file,
and loaded using @command{param=optionfile}. Please refer to the
@uref{https://github.com/BioPP/bpp-documentation/wiki/BppSuite, Bio++ Program Suite manual, Bio++
Program Suite manual} for more details, including the use of
variables, priority of option values, etc.

@c ------------------------------------------------------------------------------------------------------------------

@c @node testnh, mapnh, Introduction, Top
@c @chapter Testing non-stationarity with TestNH

@c TestNH reads an alignment file using the same syntax as all bppSuite
@c programs (@ref{Sequences, , , bppsuite, in
@c @uref{https://github.com/BioPP/bpp-documentation/wiki/BppSuite, Bio++ Program Suite manual, Bio++
@c Program Suite manual}}). All formats are supported, as well as
@c sequence filtering options. It performs the Bowker test for all pairs
@c of sequences, and compute the respective p-values. Two statistics are
@c then computed, based on the pairwise tests: The median of all pairwise
@c statistics, and the number of significant tests, given a certain
@c threshold, specified with the option:
@c @table @command
@c @item bowker_test.threshold = @{float>0@}
@c The threshold to consider pairwise tests significant.
@c @end table

@c In order to evaluate the global significance of the test for the full
@c alignment, the statistics have to be compared to their null
@c expectation. This is achieved using a parametric bootstrap approach,
@c where sequences are simulated under a homogeneous model of evolution.
@c Such a model requires a phylogenetic tree to be input, using the
@c syntax described in the bppSuite manual (@ref{Tree, , , bppsuite,
@c @uref{https://github.com/BioPP/bpp-documentation/wiki/BppSuite, Bio++ Program Suite manual, Bio++
@c Program Suite manual}}). Any model of bppSuite can then be used
@c (@ref{Model, , , bppsuite, @uref{https://github.com/BioPP/bpp-documentation/wiki/BppSuite, Bio++
@c Program Suite manual, Bio++ Program Suite manual}}). As a null
@c hypothesis a homogeneous model should be used, but it is possible to
@c test any alternative hypothesis, as performed in Dutheil and Boussau
@c (2008). Note: when a nonhomogeneous model is specified, which involves
@c nodes id specification, it is safer to use the NHX input format for
@c trees, which allows to explicitly records the ids for each node.
@c Alternatively, nodes will be numbered sequentially while parsed. The
@c number of simulations to perform is specified using option
@c @table @command
@c @item bootstrap.number = @{int > 0@}
@c The number of bootstrap replicates to perform.
@c @end table
@c TestNH will then report a p-value based on these simulations for the two global statistics (median of pairwise statistics and number of pairwise significant tests). The p-value is computed as @math{(N_{great} + 1)/(N_{tot} + 1)}, where @math{N_{great}} is the number of replicates for which the statistics was greater or equal to the one of the real data set, and @math{N_{tot}} is the total number of replicates.
@c In addition, the statistic for each replicate can be output in a separate file, for visual inspection of the distribution:
@c @table @command
@c @item bootstrap.dist_file = @{path@}
@c The file where to output detailed simulation results (in text format, one simulation per line).
@c @end table

@c ------------------------------------------------------------------------------------------------------------------

@node mapnh, , Introduction, Top
@chapter Substitution mapping with MapNH

@section Data import

MapNH takes as input a sequence alignment, as described in the bppSuite manual 
(@ref{Sequences, , , bppsuite, @uref{https://github.com/BioPP/bpp-documentation/wiki/BppSuite, Bio++ Program Suite manual, Bio++
Program Suite manual}}). It then performs substitution mapping to count substitutions for each site of the alignment and each branch of a phylogenetic tree, input using the bppSuite syntax (@ref{Tree, , , bppsuite, @uref{https://github.com/BioPP/bpp-documentation/wiki/BppSuite, Bio++ Program Suite manual, Bio++
Program Suite manual}}).

@section Substitution mapping

The substitution mapping procedure requires a model of sequence
evolution. As the procedure is robust to the type of model used, a
Jukes-Cantor model is used by default. It is recommended however to
use a less coarse model whenever possible (particularly for large
alphabets like codon alphabets). All non-mixed models available in
bppSuite are supported (@ref{Model, , , bppsuite,
@uref{http:bioweb.me/bppsuite, Bio++ Program Suite manual, Bio++
Program Suite manual}}). A homogeneous model (like GTR for nucleotide,
JTT92 for proteins and YN98 for codons) is usually a good start. Non
homogeneous models are also supported, mainly for a posteriori
validation of mapping robustness (to be used with PartNH for
instance).

MapNH can perform several types of substitution mapping, which
determine which type of substitution have to be counted and used for
clustering branches. This is specified with command:

@table @command
@item map.type = @{register described@}
A description of the register to use.

The types of substitutions to map are:

@table @var
@item All
Maps all @math{n(n-1)} possible substitutions. This option should be
only used for small alphabet sizes like DNA or RNA, as it uses a large
amount of memory and dilutes the information.
@item Total
Counts the total number of substitutions.
@item Selected
Maps substitutions as defined in a list. This list is built as:

@cartouche
@example
substitution.list = (Ts:A->G, G->A, C->T, T->C) 
(Tv: A->C, A->T, T->A, C->A, G->C, G->T, C->G, T->G)
@end example
@end cartouche

The same group of substitutions is delimited by parentheses. The name,
 if entered, is entered at the start of a string and followed by ":".
 Substitutions are delimited by ",", and each substitution is defined
 with a "->" symbol.

@item GC @{alphabet=nucleotides or codons@}
Maps two types of substitutions: @samp{AT to GC} and @samp{GC to AT}.
With codon alphabet, only synonymous substitutions are considered
(otherwise see also @var{SW} option). This option takes as input an
optional argument telling if the counts should be corrected for
nonstationarity: @command{GC(stationarity=no)} (yes by default) will
normalize the counts by the ancestral frequencies of the corresponding
node.
@item TsTv @{alphabet=nucleotides or codons@}
Counts transitions (type 1) and transversions (type 2).
@item SW @{alphabet=nucleotides or codons@}
Counts substitutions between or within GC vs AT Watson-Crick bounds,
ie whether the bound is strong (GC pair) or weak (AT pair).
The type numbers are 1 :  S->S,  2 : S->W, 3: W->S, 4: W->W.
@item DnDs @{alphabet=codons@}
Counts nonsynonymous (type 2) and synonymous substitutions (type 1).
@item IntraAA @{alphabet=codons@}
Intra amino-acid substitutions (type following the AA alphabetic
order).
@item InterAA @{alphabet=codons@}
Inter amino-acid substitutions (in both directions).
@item KrKc @{alphabet=proteins or codons@}
Counts conservative (type 1) or non-conservative substitutions (type2).
@item Combination(reg1=@{map.type@}, reg2=@{map.type@}, ...)
Counts combinations of substitution types.
@end table


@item output.counts=@{output type@}

Describes the type of outputs. There are several types:
@itemize @bullet
@item
Per type, as several newick trees with counts as branch lengths for each type.
Counts are summed over all sites.
@item
Per branch and per site, as a table with one row per site and one column per branch.
Counts are summed over all types.
@item
Per type and per site, as a table with one row per site and one column per type.
Counts are summed over all branches.
@item
Per site, per branch, per type, as several table files, one per type.
@end itemize
The corresponding options are:

@table @var
@item PerType(prefix = @{path@})
With the prefix name for all counts tree files. Tree file for counts of type 1 will be named @samp{prefix2}, for type 2 @samp{prefix2} and so on.
@item PerBranchPerSite(file = @{path@})
The file path indicates where the table should be stored.
@item PerSitePerType(file = @{path@})
The file path indicates where the table should be stored.

@item PerBranchPerSitePerType(prefix = @{path@})
With the prefix name for all table files. Table file for counts of type 1 will be named @samp{prefix2}, for type 2 @samp{prefix2} and so on.
@end table

The distinct outputs can be combined as a list, for instance:

@cartouche
@example
output.counts=PerType(prefix=mapping_per_type),\
              PerBranchPerSite(file=mapping_per_site.txt)
@end example
@end cartouche

Based on this counts, MapNH can make a global test to assess if there is heterogeneity between branches:
@item test.global = @{boolean@}
Tell if global tests should be performed. If yes, two test will be done: a chi square contingency table, and a multinomial test. Note that both tests are indicative only, as the assumptions mode for computing the p-values may be incorrect.

@end table

@c @section Branch clustering

@c Finally, MapNH can group branches in the tree with similar substitution processes, using a clustering approach. This is enabled with option:
@c @table @command
@c @item test.branch = @{boolean@}
@c Tell if branch clustering should be performed.
@c @end table

@c The clustering procedure recognizes a few more options. First one can restrain the search by only allowing neighbor branches to have the same substitution process (the so(called @samp{join} model, as opposed to the @samp{free} model where any branch can be clustered with any other branch in the tree). This is set up with option
@c @table @command
@c @item test.branch.neighbor = @{boolean@}
@c Tell if only neighbor branches are allowed to be clustered.
@c @end table

@c Then come two optional corrections for the clustering:
@c @table @command
@c @item test.branch.negbrlen = @{boolean@}
@c Say if negative branches in the clustering tree are allowed. Leaving this option to @samp{no}, the default, is recommended.
@c @item test.branch.auto_cluster = @{Marginal|Global@}
@c Parametrize when branches should be automatically clustered with their parent branch. Two methods are available:
@c @table @command
@c @item Marginal(threshold=@{int>=0@})
@c Will systematically cluster all nodes for which at least one count is below the given threshold value.
@c @item Global(threshold=@{int>=0@})
@c Will systematically cluster all nodes for which the sum of counts is below the given threshold value.
@c @end table
@c @end table

@c The resulting cluster tree will be output in newick format, with nodes ids from the input phylogenetic tree as leave names:
@c @table @command
@c @item output.cluster_tree.file = @{path@}
@c The path toward the output clustering tree.
@c @end table

@c @section Tree format conversion (for convenience)

@c For convenience, MapNH also provide the possibility to output the phylogenetic tree in Nhx format, if it was provided in another format. The Nhx format warranties that nodes id will be correctly saved.
@c @table @command
@c @item output.tree_with_id.file = @{path@}
@c The path toward the tree file to save (in Nhx format).
@c @end table

@c @c ------------------------------------------------------------------------------------------------------------------

@c @node partnh, randnh, mapnh, Top
@c @chapter Testing partitions with nonhomogeneous models using PartNH

@c PartNH retrieves branch partitions from a clustering tree. Partitions can be specified by a threshold on the clustering tree, or by model selection using various criteria.

@c @section Data loading

@c As MapNH, PartNH takes as input a sequence alignment, as described in
@c the bppSuite manual (@ref{Sequences, , , bppsuite,
@c @uref{http:bioweb.me/bppsuite, Bio++ Program Suite manual, Bio++
@c Program Suite manual}}). It also requires a clustering tree, in Newick
@c parenthetic format:
@c @table @command
@c @item input.cluster_tree.file = @{path@}
@c Input clustering tree, with nodes id as leave labels (this tree is typically produced by MapNH).
@c @end table

@c @section Generating partitions

@c Then one has to specified the method used for retrieving partitions:
@c @table @command
@c @item partition.method = @{threshold|auto@}
@c Method to retrieve partitions.
@c @end table
@c With the @command{threshold} option, partitions will be deduced from the tree given a certain threshold (the units of which depending on the clustering tree. If MapNH was using, the threshold is a p-value from the multinomial test). The threshold is set using:
@c @table @command
@c @item partition.threshold = @{float>0@}
@c The threshold to use to define partitions.
@c @end table
@c With the @command{auto} option, PartNH will test several levels of partitioning and compare them using a model selection approach. In order to do so, PartNH needs the corresponding phylogenetic tree to which the clustering tree refers to, in Nhx format in order to ensure matching of id names. This is provided by
@c @table @command
@c @item input.tree.file = @{path@}
@c The input phylogenetic tree in Nhx format. Recall that MapNH can convert trees to Nhx.
@c @end table
@c When performing model selection, the criterion for model selection should be set:
@c @table @command
@c @item partition.test = @{AIC,AICc,BIC,LRT@}
@c The criterion to use for selecting the best model. Should be one of Akaike's Information Criterion (AIC), eventually corrected for small sample sizes (AICc), Bayesian Information Criterion (BIC) or Likelihood Ratio Test (LRT).
@c @item partition.test.threshold = @{0<float<1@}
@c The threshold p-value to use for the LRT test
@c @item partition.test.stop_condition = @{int>0@}
@c Tell how many models should be tested after a local minimum was found. Only applies for AIC(c) and BIC.
@c @end table

@c The last step for the model selection procedure is to set a model
@c family. For now, PartNH can only test models with the same model (yet
@c with distinct parameter values) for all branches, and with only one
@c common partition for all parameters. Models can be specified using the
@c syntax of the bppSuite programs (@ref{Model, , , bppsuite,
@c @uref{http:bioweb.me/bppsuite, Bio++ Program Suite manual, Bio++
@c Program Suite manual}}). More precisely, the syntax for
@c non-homogeneous models is the same as for the @samp{one_per_branch}
@c model type. It is possible to specify some parameters which will not
@c be partitioned, using
@c @table @command
@c @item nonhomogeneous.shared_parameters = @{list@}
@c List of names of parameters which should not be partitioned. The syntax is the same as option @samp{nonhomogeneous_one_per_branch.shared_parameters} for the bppSuite programs.
@c @end table
@c Non stationary models will also require a @samp{root_frequencies} arguments, as described in the bppSuite manual. See also the example data sets distributed with the source code of this package.
 
@c @section Output files

@c PartNH can output several files, with different information content.
@c The most general output is a tree file with nodes labeled according to their partition number:
@c @table @command
@c @item output.partitions.file = @{path@}
@c Output tree with partition labels.
@c @end table

@c In case an automatic model selection has been performed, more information can be output:
@c @table @command
@c @item output.model.file = @{path@}
@c The selected model will be written using the bppSuite syntax
@c (@ref{Model, , , bppsuite, @uref{http:bioweb.me/bppsuite, Bio++
@c Program Suite manual, Bio++ Program Suite manual}})
@c @item output.intermediate.models = @{boolean@}
@c Tells if all tested models should be output, in addition to the best one. Models will be written into file with names @samp{output.model.file} with a number as a suffix.
@c @item output.log.file = @{path@}
@c A log file in tabular format, containing information on each portioning tested (corresponding threshold, number of partitions, log likelihood, number of degrees of freedom, AIC(c) and BIC).
@c @item output.tree.file = @{path@}
@c The phylogenetic tree with branch lengths computed from the selected
@c model. Syntax follows the bppSuite format (@ref{Tree, , , bppsuite,@
@c @uref{http:bioweb.me/bppsuite, Bio++ Program Suite manual, Bio++
@c Program Suite manual}}).
@c @item output.partitions.record = @{path@}
@c A tabular file with all partitions tested. Each row corresponds to one node of the phylogenetic tree, and each column contains the corresponding cluster numbers the node was assigned to.
@c @item output.parameters.file = @{path@}
@c Output estimated parameters for all nodes in a tabular file, one row per node and one column per parameter.
@c @end table

@c @c ------------------------------------------------------------------------------------------------------------------

@c @node randnh,  , partnh, Top
@c @chapter Simulation random partitions using RandNH

@c RandNH is an helper programs which generates random partitions in
@c order to simulate nonhomogeneous data. It should therefore be used in
@c combination with the bppSeqGen program from the bppSuite package. The
@c program takes as input a phylogenetic tree file (@ref{Tree, , ,
@c bppsuite, @uref{http:bioweb.me/bppsuite, Bio++ Program Suite manual,
@c Bio++ Program Suite manual}}), which it can converts to Nhx format for
@c preserving nodes ids, using the @samp{output.tree.file} option. Model
@c file will be written to the path specified by option
@c @samp{output.model.file}, in the bppSuite syntax (@ref{Model, , ,
@c bppsuite, @uref{http:bioweb.me/bppsuite, Bio++ Program Suite manual,
@c Bio++ Program Suite manual}}). Finally, the type of model can be
@c configured with two options:
@c @table @command
@c @item nonhomogeneous.number_of_models = @{int > 1@}
@c Specify the number of node clusters to generate
@c @item nonhomogeneous.type_of_model = @{free|join@}
@c Tell if partitions should be generated according to the @samp{free} (each node has a random partition number) or @samp{join} (clusters contain only connected nodes) models.
@c @end table

@c ------------------------------------------------------------------------------------------------------------------

@c end of document

@c @node Index,  , Reference, Top
@c @unnumbered Index
@c
@c @printindex cp

@bye
